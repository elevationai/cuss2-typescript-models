// This file is auto-generated by @hey-api/openapi-ts

/**
 * Individual agreement/consent text to present to the potential enrollee.
 */
export type AgreementTextType = {
    agreementText?: string;
    acceptanceMandatory: boolean;
    agreementName?: string;
};

/**
 * Individual association data item, exclusively maintained by and meaningful only to the client.
 */
export type AssociationDataItemType = {
    data?: string;
    associationDataTag: string;
};

/**
 * Replacement of the former CORBA Any data type. This redundant element is included for document consistency, documentation and as a placeholder for future functionality only. A characteristics request does not have to explicitly include it.
 */
export type BiometricAnyType = string | number | boolean;

/**
 * Common use biometric provider component request/response message.
 */
export type BiometricProviderMessage = {
    biometricProviderMessageType: BiometricProviderMessageType;
    biometricProviderMessageReturnType: BiometricProviderMessageType;
    /**
     * What type of biometric provider message this is.
     */
    biometricFunctionType: 'ASSOCIATE' | 'DISASSOCIATE' | 'ENROLL' | 'GET_ASSOCIATIONS' | 'IDENTIFY' | 'PREVIEW' | 'PURGE' | 'VERIFY';
    /**
     * Biometric function request from common use application to biometric provider component.
     */
    biometricRequest?: {
        /**
         * Execution environment and parameters.
         */
        environment?: {
            /**
             * Whether to execute the biometric function in accessibility mode.
             */
            accessibilityMode?: boolean;
            /**
             * ISO 639-1 (2-character) code for the interface language to be used by the biometric provider.
             */
            language: string;
        };
        /**
         * List of agreements/consents to present prior to or during enrollment.
         */
        agreementsList?: {
            agreementTextList: Array<AgreementTextType>;
        };
        passenger?: PassengerDataType;
        gpDataList?: GpDataListType;
    };
    /**
     * Supplementary device-acquired or other unsolicited data received and forwarded by application during biometric provider function execution.
     */
    biometricRequestData?: {
        processing?: {
            /**
             * A sequence of one or more keypad key identifiers as defined in the CUSS specification "Keyboard and Navigation Keypad" section. Values include, but are not limited to, NAVUP, NAVDOWN, NAVPREVIOUS, NAVNEXT, NAVENTER, NAVHOME, NAVEND and NAVHELP.
             */
            keypadKey?: Array<string>;
        };
        passenger?: PassengerDataType;
    };
    /**
     * Function request response from biometric provider component to common use application.
     */
    biometricResponse?: {
        responseType: 'CANCELLATION' | 'FAILURE' | 'NOTIFICATION' | 'SUCCESS';
        /**
         * Failure specification.
         */
        failureReason?: {
            /**
             * Eror code as received and mapped from the IMPs response.
             */
            failureCode: 'FAILED' | 'TIMEOUT' | 'CAMERA_ERROR' | 'INVALID_CONFIGURATION' | 'MATCH_FAILED' | 'NOT_IDENTIFIED' | 'POOR_CAMERA_IMAGE' | 'POOR_DOCUMENT_IMAGE' | 'DATA_SET_NOT_FOUND' | 'FACE_NOT_DETECTED' | 'CAPTURE_FAILED';
            /**
             * Optional free form text describing the failure.
             */
            failureDescription?: string;
        };
        passengerData?: PassengerDataType;
        gpDataList?: GpDataListType;
    };
};

/**
 * What type of biometric provider message is expected to be returned.
 */
export enum BiometricProviderMessageType {
    NONE = 'NONE',
    REQUEST = 'REQUEST',
    REQUEST_DATA = 'REQUEST_DATA',
    RESPONSE = 'RESPONSE'
}

/**
 * Characteristics document type.
 */
export enum CharacteristicsDocumentType {
    NONE = 'NONE',
    REQUEST = 'REQUEST',
    RESPONSE = 'RESPONSE'
}

/**
 * Common use message document root element.
 */
export type CommonUseBiometricMessage = {
    /**
     * The document type that is included in this message.
     */
    documentType: 'CHARACTERISTICS' | 'BIOMETRIC_PROVIDER_MESSAGE' | 'ERROR_RESPONSE';
    /**
     * An arbitrary tracking value that the CUSS application chooses and assigns when starting a biometric provider function. The CUSS platform must then echo this requested value in all subsequent responses or asynchronous event messages related to that biometric provider function. This correlation permits a CUSS application to match and associate request and response messages and is critical for the case where an application has more than one multi-step biometric provider function ongoing concurrently.
     */
    sessionID?: string;
    /**
     * Component characteristics.
     */
    characteristics?: {
        characteristicsDocumentType: CharacteristicsDocumentType;
        characteristicsDocumentReturnType: CharacteristicsDocumentType;
        characteristicsRequest?: BiometricAnyType;
    };
    biometricProviderMessage?: BiometricProviderMessage;
    /**
     * Error code as reported from the CUSS platform.
     */
    errorResponse?: 'DATA_ERROR' | 'FORMAT_ERROR' | 'ILLOGICAL';
};

/**
 * General Purpose Data Item (name-value pair)
 */
export type GpDataItemType = {
    /**
     * The name of this specific data item.
     */
    name: string;
    /**
     * Individual association data item, exclusively maintained by and meaningful only to the client.
     */
    value: string;
};

/**
 * Passenger attribute association data managed by the client.
 */
export type GpDataListType = {
    /**
     * Individual association data item, exclusively maintained by and meaningful only to the client.
     */
    gpDataItems: Array<GpDataItemType>;
};

/**
 * The MRZ track and its corresponding index.
 */
export type MrzTrackType = {
    trackData?: string;
    trackNumber?: number;
};

/**
 * Passenger biometrics data item.
 */
export type PassengerBiometricsType = {
    data?: string;
    biometricsType: 'FACE' | 'FINGER' | 'IRIS' | 'PALM';
    lightType?: 'IR' | 'UV' | 'VISIBLE';
    dataSource?: 'BIOMETRIC_PROVIDER' | 'CAMERA' | 'MRTD_CHIP' | 'MRTD_VISIBLE' | 'SCANNER';
    dataFormat: 'BMP' | 'JPG' | 'PNG';
};

/**
 * Biometric function request passenger data.
 */
export type PassengerDataType = {
    /**
     * Can be a maximum of 2 IDs (client and provider).
     */
    passengerIDs?: Array<PassengerIdType>;
    /**
     * Passenger's family name (last name or surname).
     */
    passengerFamilyName?: string;
    /**
     * Passenger's given name (christian or first names).
     */
    passengerGivenNames?: string;
    /**
     * MRZ data from passenger's government-issued travel, visa or residency document.
     */
    passengerMRZData?: {
        mrzTrackData: Array<MrzTrackType>;
    };
    /**
     * List or container of all passenger biometric data sets.
     */
    passengerBiometricsData?: {
        passengerBiometrics: Array<PassengerBiometricsType>;
    };
    /**
     * Passenger attribute association data managed by the client.
     */
    associationDataList?: {
        /**
         * Individual association data item, exclusively maintained by and meaningful only to the client.
         */
        associationDataItem?: Array<AssociationDataItemType>;
    };
};

/**
 * Airline client-defined or biometric provider-defined unique passenger identifier.
 */
export type PassengerIdType = {
    identifier?: string;
    identifierType?: 'CLIENT' | 'PROVIDER';
};

/**
 * Definition for light controls.
 */
export type IlluminationData = {
    /**
     * The duration of the illumination in milliseconds (steady or blinking). - A negative value value (e.g. -1) defines the duration as infinite and lasts until disable() is called on the component.
     */
    duration: number;
    /**
     * The color of the light in RGB values. A value of 255,255,255 means white, a value of 0,0,0 (black) would switch the light off. Instead of separate values for RGB named color values may be used. - Light may support only a single color.
     */
    lightColor: {
        /**
         * Predefined values: CLR_ON, CLR_OFF, CLR_RED, CLR_GREEN, CLR_BLUE, CLR_DARKRED, CLR_DARKGREEN, CLR_DARKBLUE, CLR_YELLOW, CLR_MAGENTA, CLR_CYAN, CLR_AMBER, CLR_PURPLE, CLR_SPRINGGREEN, CLR_WHITE
         */
        name?: 'CLR_ON' | 'CLR_OFF' | 'CLR_RED' | 'CLR_GREEN' | 'CLR_BLUE' | 'CLR_DARKRED' | 'CLR_DARKGREEN' | 'CLR_DARKBLUE' | 'CLR_YELLOW' | 'CLR_MAGENTA' | 'CLR_CYAN' | 'CLR_AMBER' | 'CLR_PURPLE' | 'CLR_SPRINGGREEN' | 'CLR_WHITE';
        rgb?: RgbType;
    };
    blinkRate?: BlinkingRateType;
};

/**
 * The definition of the blinking rate. If a pair of 0,0 is specified (default) or only one value is 0 blinking is turned off.
 */
export type BlinkingRateType = {
    /**
     * Time in milliseconds the light remains switched off.
     */
    durationOff: number;
    /**
     * Time in milliseconds the light is switched on.
     */
    durationOn: number;
};

/**
 * Distinct RGB values.
 */
export type RgbType = {
    /**
     * Value for the red color part. Values from 0 - 255.
     */
    red: number;
    /**
     * Value for the red color part. Values from 0 - 255.
     */
    green: number;
    /**
     * Value for the red color part. Values from 0 - 255.
     */
    blue: number;
};

/**
 * Authorized financial elements (mandatory in response, not required in request).
 */
export type AmountType = {
    /**
     * ISO 4217 (3-character alpha) currency code.
     */
    currencyCode: string;
    /**
     * Requested or authorized amount in units.subunits (arithmetic major units) format.
     */
    baseAmount: number;
};

/**
 * Acquirer or issuer provided approval (authorization) code.
 */
export type ApprovalCode = string;

/**
 * Requested or authorized financial elements.
 */
export type AuthorizationAmounts = {
    requestedAmounts?: AmountType;
    approvedAmounts?: AmountType;
};

/**
 * A string identifying the card brand or scheme that can be accepted for payment.
 *
 */
export enum CardBrand {
    AMEX = 'AMEX',
    CART_BLANCHE = 'CART_BLANCHE',
    DISCOVER = 'DISCOVER',
    JCB = 'JCB',
    MAESTRO = 'MAESTRO',
    MASTERCARD = 'MASTERCARD',
    SWITCH = 'SWITCH',
    VISA = 'VISA'
}

/**
 * Payment system supported, component-configured or application-requested card brand list.
 */
export type CardBrandList = {
    overridable?: boolean;
    cardBrands: Array<CardBrand>;
};

/**
 * Characteristics document type.
 */
/* Commenting out duplicate ....
export enum CharacteristicsDocumentType {
    NONE = 'NONE',
    REQUEST = 'REQUEST',
    RESPONSE = 'RESPONSE'
}
*/

/**
 * Common use message document root element.
 */
export type CommonUsePaymentMessage = {
    /**
     * An arbitrary tracking value that the CUSS application chooses and assigns when starting a payment function. The CUSS platform must then echo
     * this requested value in all subsequent responses or asynchronous event messages related to that payment function. This correlation permits a
     * CUSS application to match and associate request and response messages and is critical for the case where an application has more than one multi-step
     * payment function ongoing concurrently.
     */
    sessionID?: string;
    /**
     * The document type that is included in this message.
     */
    documentType: 'CHARACTERISTICS' | 'EPAYMENT_MESSAGE' | 'ERROR_RESPONSE';
    /**
     * Component characteristics.
     */
    characteristics?: {
        /**
         * The list of supported languages as ISO 639-1 (2-character) codes.
         */
        supportedLanguages?: Array<string>;
        characteristicsDocumentType: CharacteristicsDocumentType;
        characteristicsDocumentReturnType: CharacteristicsDocumentType;
        characteristicsResponse?: {
            /**
             * ePayment component characteristics.
             */
            ePayment?: {
                featureList?: FeatureList;
                cardBrandList?: CardBrandList;
                mediaTypeList?: MediaTypeList;
                currencyCodeList?: CurrencyCodeList;
            };
        };
    };
    ePaymentMessage?: EPaymentMessage;
    /**
     * Document cannot be parsed or validated, or is unexpected, out-of-sequence or out-of-context for the current component state.
     */
    errorResponse?: {
        /**
         * Echo of unreadable or illogical document in base64 format.
         */
        errorDocument?: string;
        /**
         * Human-readable reason that the document could not be processed by the component.
         */
        errorReason: 'DATA_ERROR' | 'FORMAT_ERROR' | 'ILLOGICAL';
        /**
         * Error code as reported from the system(s) down the line.
         */
        errorCode: number;
    };
};

/**
 * ISO 4217 (3-character alpha) currency code.
 */
export type CurrencyCode = string;

/**
 * Payment system supported, component-configured or application-requested payment currency code list.
 */
export type CurrencyCodeList = {
    overridable?: boolean;
    currencyCodes: Array<CurrencyCode>;
};

/**
 * Common use payment component request/response message.
 */
export type EPaymentMessage = {
    ePaymentMsgType: 'OPERATION' | 'SETUP' | 'TRANSACTION';
    /**
     * Execution context setup.
     */
    setup?: {
        merchantID?: MerchantId;
        featureList?: FeatureList;
        cardBrandList?: CardBrandList;
        mediaTypeList?: MediaTypeList;
        currencyCodeList?: CurrencyCodeList;
    };
    /**
     * Financial transaction.
     */
    transaction?: {
        transactionDocumentType: TransactionDocumentType;
        transactionDocumentReturnType?: TransactionDocumentType;
        transactionType: 'CANCEL' | 'PRE_AUTH' | 'POST_AUTH' | 'PURCHASE' | 'REFUND' | 'VOID_PURCHASE' | 'VOID_REFUND';
        /**
         * Financial request from common use application to payment component.
         */
        transactionRequest?: {
            /**
             * ISO 639-1 (2-character) code for the interface language to be used at the payment device and in transaction status messages.
             * This is an optional value that lets the CUSS application suggest a language to use when performing the payment transaction.
             * The payment subsystem could use this value to adjust prompts displayed on the payment terminal screen or the language on the
             * preformatted receipt data. This value could be set in response to a prior language selection by the kiosk application user as
             * part of the overall kiosk transaction. The payment system may override this setting once a language value is read from the card
             * itself as part of the transaction.
             */
            language?: string;
            /**
             * Optional common use terminal/application operational parameters, allowing the CUSS application to indicate more specific values related
             * to the payment transaction for tracking and reconciliation purposes. If the CUSS application does not supply any values, the CUSS platform
             * may provide appropriate values to the payment subsystem depending on what data fields that subsystem requires.
             */
            environment?: {
                merchantID?: MerchantId;
                /**
                 * Common use kiosk/terminal/station identifier. May be reported on cardholder or reconciliation statements for informational purposes.
                 */
                location?: string;
                /**
                 * Agent/cashier (or pseudo-cashier) identifier. May be reported on cardholder or reconciliation statements for informational purposes.
                 * Some payment solutions may require this, but the component will synthesize a value if one is required but none is explicitly provided.
                 */
                cashier?: string;
                /**
                 * Airline/merchant order, receipt or ticket reference number. May be reported on cardholder or reconciliation statements
                 * for informational purposes.
                 */
                orderReference?: string;
            };
            /**
             * Details of previously acquired pre-authorization being finalized by this post-authorization.
             */
            preAuth?: {
                transactionReference?: TransactionReference;
                approvalCode?: ApprovalCode;
                approvalAmounts: AmountType;
            };
            /**
             * The information in the itinerary block is optional and lets the CUSS application specific additional tracking and
             * reconciliation data for the payment transaction, relating specifically to an airline transaction itinerary.
             * The CUSS platform provider may mandate that this information be provided with all transactions.
             * This requirement will be established during the negotiation and configuration phase of the initial deployment of
             * payment capability for an airline. It is anticipated that the CUSS platform itself will not store or make use of this
             * information. Instead, it will be forwarded to the payment solution for back-end reconciliation purposes.
             */
            itinerary?: {
                /**
                 * Passenger name.
                 */
                name?: string;
                /**
                 * Passenger name record.
                 */
                pnr?: string;
                /**
                 * Transaction (flight) date (e.g. 2018-11-13).
                 */
                date?: string;
                /**
                 * Airline identifier and flight number.
                 */
                'flight-number'?: string;
                /**
                 * Departure city code.
                 */
                'departure-city'?: string;
                /**
                 * Arrival city code.
                 */
                'arrival-city'?: string;
            };
            /**
             * Descriptive billing information. This optional value lets the CUSS application suggest a value that will
             * appear on the kiosk application user’s payment summary (monthly bill, etc.) as an extended description of
             * the transaction. The value may or may not appear on the customer’s bill depending on the capabilities of
             * the airport and customer’s banking systems. Long data may be truncated. The platform may also be used as
             * an additional tracking mechanism for other systems such as aggregator and reconciliation infrastructure.
             */
            billingDescription?: string;
            gpParameters?: GpParameterList;
            authorizationAmounts?: AuthorizationAmounts;
        };
        /**
         * Financial request response from payment component to common use application.
         */
        transactionResponse?: {
            responseType: 'APPROVAL' | 'CANCELLATION' | 'DECLINE' | 'FAILURE' | 'STATUS';
            /**
             * Approval reference information. An application may use this information as it chooses. No sensitive payment information
             * shall be provided in this element. Various data items, such as cryptogram, may be required by some application providers
             * for proper payment processing and reconciliation.
             */
            approval?: {
                cardholderReceiptPrinted?: boolean;
                merchantReceiptPrinted?: boolean;
                transactionReference?: TransactionReference;
                mediaType?: MediaType;
                /**
                 * Type of approval.
                 */
                approvalType?: 'NONE' | 'PIN' | 'SIGNATURE';
                /**
                 * For an approval that requires subsequent signature verification by the application, and where the
                 * component has electronic signature capture capability, the signature capture (PNG format) data
                 * in base64 representation.
                 */
                signatureCapture?: string;
                /**
                 * Card brand name.
                 */
                cardBrand?: string;
                approvalCode?: ApprovalCode;
                gpParameters?: GpParameterList;
                authorizationAmounts: AuthorizationAmounts;
                receiptData?: Array<ReceiptData>;
            };
            /**
             * Decline, referral, failure or cancellation details. This element encapsulates the specific reason a transaction was not approved.
             * The non-approval-reason-code and referral values are not standard and will vary between payment systems. These values are likely
             * useful for logging and reconciliation purposes and would not likely be exposed to the kiosk user or affect the business logic of
             * the kiosk transaction.
             */
            nonApproval?: {
                nonApprovalReasonCode?: number;
                referral?: boolean;
                /**
                 * Optional human-readable/display text describing the reason for non-approval.
                 */
                nonApprovalReasonText?: string;
                receiptData?: Array<ReceiptData>;
            };
            transactionStatus?: TransactionStatus;
        };
        /**
         * Confirmation (or rejection) of approved funds consumption.
         */
        transactionAcknowledge?: {
            consumed: boolean;
        };
    };
    /**
     * Request that the component perform some function that is not a direct financial transaction, such as key management,
     * start-of-day, end-of-day, cashier sign-on, system status check, etc.
     */
    operation?: {
        operationDocumentType: OperationDocumentType;
        operationDocumentReturnType?: OperationDocumentType;
        operationType: 'SYSTEM_HEALTH' | 'END_OF_DAY' | 'START_OF_DAY' | 'SIGN_ON' | 'MERCHANT_SWITCH' | 'KEY_MANAGEMENT';
        /**
         * Some requests may require additional qualifying data, but those that are not required to explicitly include this element.
         */
        operationRequest?: string;
        operationResponse?: 'OFFLINE' | 'ONLINE' | 'COMPLETED' | 'IN_PROGRESS';
    };
};

/**
 * What modes of payment are supported by the payment terminal or requested by the application. The application requests a
 * particular mode of payment in its setup() request parameters. The auto-commit feature indicates whether or not the application
 * wishes to perform a manual commit at the end of a successful transaction. The pre-authorization feature indicates whether the
 * pre-authorization/post-authorization payment model is supported.
 */
export type Feature = {
    featureName: 'AUTO_COMMIT' | 'PRE_AUTHORIZATION' | 'RECEIPT_PRINTER' | 'SIGNATURE_CAPTURE' | 'SIGNATURE_CVM_SUPPORTED';
    overridable?: boolean;
};

/**
 * Payment system supported, component-configured or application-requested feature set.
 */
export type FeatureList = {
    features: Array<Feature>;
};

/**
 * General Purpose Data Item (name-value pair).
 */
export type GpParameter = {
    name: string;
    value: string;
};

/**
 * General-purpose parameters.
 */
export type GpParameterList = {
    /**
     * Special or proprietary payment parameters that can be provided by the CUSS application when requesting the payment,
     * and/or returned by the payment subsystem upon conclusion of the transaction. These are optional values. This container
     * is included in the schema to allow certain legacy payment protocols to be migrated to use the new payment interface.
     * It also allows for flexibility for future payment industry requirements that may affect common use or airline payment.
     */
    gpParameters?: Array<GpParameter>;
};

/**
 * A media type that the payment terminal is able to accept. The application can restrict these types via setup()
 * if the overridable attribute is true.
 *
 */
export enum MediaType {
    ICC = 'ICC',
    NFC = 'NFC',
    RFID = 'RFID'
}

/**
 * Payment system supported, component-configured or application-requested media type list.
 */
export type MediaTypeList = {
    overridable?: boolean;
    mediaTypes: Array<MediaType>;
};

/**
 * Optional airline/merchant identifier where operating in a multi-merchant environment.
 */
export type MerchantId = string;

/**
 * Operation document type.
 */
export enum OperationDocumentType {
    REQUEST = 'REQUEST',
    RESPONSE = 'RESPONSE'
}

/**
 * Acquirer-provided pre-formatted receipt data. This element provides pre-formatted receipt data that is the application’s responsibility to process
 * as required. It is an application business logic decision, and potentially a bank certification requirement, to properly format and process this data
 * on a receipt for the customer.
 */
export type ReceiptData = string;

/**
 * Transaction document type.
 */
export enum TransactionDocumentType {
    NONE = 'NONE',
    REQUEST = 'REQUEST',
    RESPONSE = 'RESPONSE',
    ACK = 'ACK'
}

/**
 * Acquirer or issuer provided reference to use for subsequent post-authorization or void request (unique transaction identifier, STAN).
 */
export type TransactionReference = string;

/**
 * The status of the current payment transaction reported by the payment subsystem to the application.
 */
export type TransactionStatus = {
    /**
     * Any text that is sent from the black box device to the platfrom/application
     */
    freeFormText?: string;
    transactionStatusID?: 'AMOUNT_APPROVAL' | 'APPLICATION_SELECTION' | 'CARD_INSERTION' | 'CARD_REMOVAL' | 'CASHBACK_ENTRY' | 'PIN_ENTRY' | 'PROCESSING';
};

/**
 * Direct Interface Acknowledge Codes.
 */
export type ApiAcknowledgement = {
    ackCode: AckCodes;
    requestID: UniqueId;
    /**
     * Optional description of the returned error (if any).
     */
    description?: string;
};

/**
 * Interface Return Codes definitions with the following semantics...<p>
 * *ACK_OK:* Directive has been accepted by the CUSS platform and will be processed. - Check listener for asynchronous result(s). <br>
 * *ACK_ERROR:* Any error occurred when calling the endpoint. - Check listener for detailed error/status code. <br>
 * *ACK_OAUTH_ERROR:* Application passed an invalid token when trying to execute the directive. <br>
 * *ACK_PARAMETER:* Error in parameters, such as a missing component ID, missing or incorrect data.
 *
 */
export enum AckCodes {
    ACK_OK = 'ACK_OK',
    ACK_ERROR = 'ACK_ERROR',
    ACK_OAUTH_ERROR = 'ACK_OAUTH_ERROR',
    ACK_PARAMETER = 'ACK_PARAMETER'
}

/**
 * Reference or confirmation number for the weighing values, for audit or alibi purposes.
 */
export type AlibiType = {
    /**
     * The source or provider of the alibi value.
     */
    provider?: string;
    /**
     * The alibi value.
     */
    value: string;
};

/**
 * The platform uses the CUSS 2 Application Activation Structure when activating a CUSS application.
 */
export type ApplicationActivation = {
    /**
     * The application can use this value to change its look, feel, or behavior.
     */
    applicationBrand?: string;
    /**
     * Indicates the mode of execution.<p>
     * *MAM:* Multi Application Mode <br>
     * *DSAM:* Dedicated Single Application Mode
     *
     */
    executionMode: 'MAM' | 'DSAM';
    /**
     * Indicates whether to operate in ACCESSIBLE mode or not.
     */
    accessibleMode: boolean;
    /**
     * Any additional options of execution in combination with the executionMode.
     */
    executionOptions?: Array<string>;
    /**
     * As per RFC3066.- Please refer also to: http://www.lingoes.net/en/translator/langcode.htm
     */
    languageID: string;
    /**
     * Any data to be exchanged between callers and callees after a transfer call or self-activation.
     */
    transferData?: string;
};

/**
 * Data to be passed to the platform with directive calls.
 */
export type ApplicationData = {
    /**
     * The META data of this message.
     */
    meta: {
        deviceID: UniqueId;
        requestID: UniqueId;
        /**
         * Application token (JWT) received with the Client Credentials. The token shall be passed with every platform directive.
         *
         */
        oauthToken: string;
        directive: PlatformDirectives;
        componentID?: ComponentId;
    };
    /**
     * The (optional) payload of this message.
     */
    payload?: {
        applicationState?: ApplicationState;
        applicationTransfer?: ApplicationTransfer;
        dataRecords?: DataRecordList;
        screenResolution?: ScreenResolution;
        illuminationData?: IlluminationData;
        bagdropData?: BaggageData;
        paymentData?: CommonUsePaymentMessage;
        biometricData?: CommonUseBiometricMessage;
    };
};

export type ApplicationId = {
    /**
     * eg. 3L- or 2L-code for airlines.
     */
    companyCode?: string;
    /**
     * The name of the application.
     */
    applicationName?: string;
};

/**
 * Application state codes and reasons to be passed with the statechange request.
 */
export type ApplicationState = {
    applicationStateCode: ApplicationStateCodes;
    accessibleMode: boolean;
    applicationStateChangeReasonCode: ApplicationStateChangeReasonCodes;
    /**
     * The application can use this additional field to inform the platform about the reason for the current state change in free form text. The platform stores this information in its platform logs for bug fixing purposes.
     */
    applicationStateChangeReason?: string;
    /**
     * The platform can track which airline code to use for self activated processes/applications.
     */
    applicationBrand?: string;
};

/**
 * Application state change reason codes...<p>
 * *NOT_APPLICABLE:* None of the codes below apply (e.g. state change to AVAILABLE or ACTIVE) <br>
 * *OUT_OF_SERVICE_HOURS:* Application is outside its operation time <br>
 * *OUT_OF_SERVICE_HARDWARE:* One or more necessary hardware devices are not available <br>
 * *OUT_OF_SERVICE_BHS:* The Baggage Handling System is not available <br>
 * *OUT_OF_SERVICE_CONSUMABLES:* Any of the required consumables are on low or out of stock <br>
 * *OUT_OF_SERVICE_INTERNAL:* Application internal problem (see free form text for additional information) <br>
 * *OUT_OF_SERVICE_DCS:* The airline''s Departure Control System is not reachable <br>
 * *OUT_OF_SERVICE_BACKEND:* The applications backend is not reachable <br>
 * *ABANDONED_BAG: * There's a bag left on the conveyor system that needfs to be rmoved manually
 *
 */
export enum ApplicationStateChangeReasonCodes {
    NOT_APPLICABLE = 'NOT_APPLICABLE',
    OUT_OF_SERVICE_HOURS = 'OUT_OF_SERVICE_HOURS',
    OUT_OF_SERVICE_HARDWARE = 'OUT_OF_SERVICE_HARDWARE',
    OUT_OF_SERVICE_BHS = 'OUT_OF_SERVICE_BHS',
    OUT_OF_SERVICE_CONSUMABLES = 'OUT_OF_SERVICE_CONSUMABLES',
    OUT_OF_SERVICE_INTERNAL = 'OUT_OF_SERVICE_INTERNAL',
    OUT_OF_SERVICE_DCS = 'OUT_OF_SERVICE_DCS',
    OUT_OF_SERVICE_BACKEND = 'OUT_OF_SERVICE_BACKEND',
    ABANDONED_BAG = 'ABANDONED_BAG'
}

/**
 * Application state codes...<p>
 * *UNAVAILABLE:* Application state change request to move to UNAVAILBLE <br>
 * *AVAILABLE:* Application state change request to move to AVAILBLE <br>
 * *ACTIVE:* Platform initiated or application state change request to move to ACTIVE <br>
 * *STOPPED:* Application state change request to move to STOPPED <br>
 * *RELOAD:* Application state change request to move to RELOAD <br>
 * *INITIALIZE:* Platform initiated application state <br>
 * *SUSPENDED:* Platform initiated application state <br>
 * *DISABLED:* Platform initiated application state
 *
 */
export enum ApplicationStateCodes {
    INITIALIZE = 'INITIALIZE',
    UNAVAILABLE = 'UNAVAILABLE',
    AVAILABLE = 'AVAILABLE',
    ACTIVE = 'ACTIVE',
    STOPPED = 'STOPPED',
    RELOAD = 'RELOAD',
    SUSPENDED = 'SUSPENDED',
    DISABLED = 'DISABLED'
}

/**
 * Applications and platforms use the CUSS 2 Application Transfer Structure for transferring control from one application to another.
 */
export type ApplicationTransfer = {
    targetApplicationID: ApplicationId;
    /**
     * The application can use this value to change its look, feel, or behavior.
     */
    applicationBrand?: string;
    /**
     * As per RFC3066.- Please refer also to: http://www.lingoes.net/en/translator/langcode.htm
     */
    languageID: string;
    /**
     * Any data to be exchanged between callers and callees.
     */
    transferData?: string;
};

/**
 * The characteristics for the biometrics sub system
 */
export enum BiometricsCharacteristics {
    ASSOCIATE = 'ASSOCIATE',
    DISASSOCIATE = 'DISASSOCIATE',
    ENROLL = 'ENROLL',
    GET_ASSOCIATIONS = 'GET_ASSOCIATIONS',
    IDENTIFY = 'IDENTIFY',
    PREVIEW = 'PREVIEW',
    PURGE = 'PURGE',
    VERIFY = 'VERIFY',
    FACE = 'FACE',
    FINGER = 'FINGER',
    IRIS = 'IRIS',
    PALM = 'PALM'
}

/**
 * Interface Data Type Codes with the following semantics... <p>
 * # MSR remove: *DS_TYPES_UNDEFINED:* For all data not having a specific data type (yet)<p>
 * # MSR remove: *DS_TYPES_PAYMENT_ISO:* ISO track data without truncation <p>
 * # MSR remove: *DS_TYPES_PAYMENT_JIS2:* JIS-2 track data without truncation <p>
 * # MSR remove: *DS_TYPES_FOID_JIS2:* JIS-2 track data with FOID Data truncation <br>
 * # MSR remove: *DS_TYPES_FOID_ISO:* ISO track data with FOID Data truncation <br>
 * # MSR remove: *DS_TYPES_DISCRETIONARY_ISO:* ISO track data with DISCRETIONARY Data truncation <p>
 * # MSR remove: *DS_TYPES_DISCRETIONARY_JIS2:* JIS-2 track data with DISCRETIONARY Data truncation <p>
 * *DS_TYPES_ISO:* ISO encoded data <br>
 * *DS_TYPES_VING:* VING encoded data <br>
 * *DS_TYPES_TESSA:* TESSA encoded data <br>
 * *DS_TYPES_SAFLOK:* SAFLOK encoded data <br>
 * *DS_TYPES_TIMELOX:* TIMELOC encoded data <br>
 * *DS_TYPES_KABA_ILCO:* KABA iLco encoded data <br>
 * *DS_TYPES_KABA_ILCO_FOLIO:* KABA iLco (folio) enc <p>
 * *DS_TYPES_IMAGE_IR:* Infrared image <br>
 * *DS_TYPES_IMAGE_VIS:* Visible image <br>
 * *DS_TYPES_IMAGE_UV:* Ultraviolet image <br>
 * *DS_TYPES_IMAGE_PHOTO:* Photo image <br>
 * *DS_TYPES_IMAGE_COAX:* Coaxial image <p>
 * *DS_TYPES_IMAGE_RED:* Red Image <br>
 * *DS_TYPES_IMAGE_GREEN:* Green Image <br>
 * *DS_TYPES_IMAGE_BLUE:* Blue Image <br>
 * *DS_TYPES_IMAGE_GS:* Greyscale Image (8 bit/pixel)<br>
 * *DS_TYPES_IMAGE_BW:* Black and White Image (1 bit/pixel)<br>
 * *DS_TYPES_IMAGE_BMP:* BMP formatted image <br>
 * *DS_TYPES_IMAGE_GIF:* GIF formatted image <br>
 * *DS_TYPES_IMAGE_TIF:* TIFF formatted image <br>
 * *DS_TYPES_IMAGE_PNG:* PNG formatted image <br>
 * *DS_TYPES_IMAGE_JPG:* JPG/JPEG formatted image <br>
 * *DS_TYPES_IMAGE_XBM:* XBM formatted image <br>
 * *DS_TYPES_IMAGE_XPM:* XPM formatted image <br>
 * *DS_TYPES_IMAGE_PPM:* PPM formatted image <p>
 * *DS_TYPES_VIDEO_AVI:* AVI formatted video <br>
 * *DS_TYPES_VIDEO_MP4:* MP4 formatted video <br>
 * *DS_TYPES_VIDEO_MOV:* MOV formatted video <br>
 * *DS_TYPES_VIDEO_MKV:* MKV formatted video <br>
 * *DS_TYPES_VIDEO_WMV:* WMV formatted video <p>
 * *DS_TYPES_CODELINE:* Codeline data <br>
 * *DS_TYPES_BARCODE:* Barcode data <br>
 * *DS_TYPES_MIWA:* Miwa data <p>
 * *DS_TYPES_SCAN_PDF417:* PDF417 2D barcode <br>
 * *DS_TYPES_SCAN_AZTEC:* Aztec 2D barcode <br>
 * *DS_TYPES_SCAN_DMATRIX:* Datamatrix 2D barcode <br>
 * *DS_TYPES_SCAN_QR:* QR Code 2D barcode <br>
 * *DS_TYPES_SCAN_CODE39:* Code39 1D barcode <br>
 * *DS_TYPES_SCAN_CODE128:* Code128 1D barcode <br>
 * *DS_TYPES_SCAN_CODE2OF5:* Code2of5 1D barcode <p>
 * *DS_TYPES_ISO7816:* Communication protocols for PICC/RFID/NFC devices <p>
 * *DS_TYPES_PRINT_2S_PAGE:* 2-Sided Single-page printing <br>
 * *DS_TYPES_PRINT_2S_MULTI:* 2-Sided Multi-page printing <br>
 * *DS_TYPES_PRINT_PDF:* Adobe PDF print format <p>
 * *DS_TYPES_PRINT_SVG:* Scalable Vector Graphics format <p>
 * *DS_TYPES_MIFARE:* Communication protocols for PICC/RFID/NFC devices <br>
 * *DS_TYPES_SUICA:* Communication protocols for PICC/RFID/NFC devices <p>
 * *DS_TYPES_ISO15961:* IATA RFID baggage tag devices <br>
 * *DS_TYPES_ITPS:* IATA Technical Peripheral Specifications (former AEA) formatted data <br>
 * *DS_TYPES_RP1745:* IATA Baggage Service Messages Format <br>
 * *DS_TYPES_WEIGHT:* Baggage Weight from Scale or Conveyor <p>
 * *DS_TYPES_DIMENSION:* Baggage Dimensions from Conveyor <p>
 * *DS_TYPES_EPASSPORT_DG1:* e-Passport format <br>
 * *DS_TYPES_EPASSPORT_DG2:* e-Passport format <br>
 * *DS_TYPES_EPASSPORT_DG3:* e-Passport format <br>
 * *DS_TYPES_EPASSPORT_DG4:* e-Passport format <br>
 * *DS_TYPES_EPASSPORT_DG5:* e-Passport format <br>
 * *DS_TYPES_EPASSPORT_DG6:* e-Passport format <br>
 * *DS_TYPES_EPASSPORT_DG7:* e-Passport format <br>
 * *DS_TYPES_EPASSPORT_DG8:* e-Passport format <br>
 * *DS_TYPES_EPASSPORT_DG9:* e-Passport format <br>
 * *DS_TYPES_EPASSPORT_DG10:* e-Passport format <br>
 * *DS_TYPES_EPASSPORT_DG11:* e-Passport format <br>
 * *DS_TYPES_EPASSPORT_DG12:* e-Passport format <br>
 * *DS_TYPES_EPASSPORT_DG13:* e-Passport format <br>
 * *DS_TYPES_EPASSPORT_DG14:* e-Passport format <br>
 * *DS_TYPES_EPASSPORT_DG15:* e-Passport format <br>
 * *DS_TYPES_EPASSPORT_DG16:* e-Passport format <br>
 * *DS_TYPES_EPASSPORT_DG17:* e-Passport format <br>
 * *DS_TYPES_EPASSPORT_DG18:* e-Passport format <br>
 * *DS_TYPES_EPASSPORT_DG19:* e-Passport format <br>
 * *DS_TYPES_EPASSPORT_DG20:* e-Passport format <p>
 * *DS_TYPES_EPAYMENT:* E-Payment - CUSS2 Payments Domain<p>
 * *DS_TYPES_ILLUMINATION:* Illumination LEDs Interface - CUSS2 Illumination Domain<p>
 * *DS_TYPES_SSML:* SSML Specification supported by the Announcement Interface <br>
 * *DS_TYPES_KEY:* Navigation keypad events supported by Keypad Interface <br>
 * *DS_TYPES_KEY_UP:* Navigation keypad event supported by Keypad Interface <br>
 * *DS_TYPES_KEY_DOWN:* Navigation keypad event supported by Keypad Interface <p>
 * *DS_TYPES_BIOMETRIC:* Biometric Interface - CUSS2 Biometrics Domain
 *
 */
export enum CussDataTypes {
    DS_TYPES_ISO = 'DS_TYPES_ISO',
    DS_TYPES_VING = 'DS_TYPES_VING',
    DS_TYPES_TESSA = 'DS_TYPES_TESSA',
    DS_TYPES_SAFLOK = 'DS_TYPES_SAFLOK',
    DS_TYPES_TIMELOX = 'DS_TYPES_TIMELOX',
    DS_TYPES_KABA_ILCO = 'DS_TYPES_KABA_ILCO',
    DS_TYPES_KABA_ILCO_FOLIO = 'DS_TYPES_KABA_ILCO_FOLIO',
    DS_TYPES_IMAGE_IR = 'DS_TYPES_IMAGE_IR',
    DS_TYPES_IMAGE_VIS = 'DS_TYPES_IMAGE_VIS',
    DS_TYPES_IMAGE_UV = 'DS_TYPES_IMAGE_UV',
    DS_TYPES_IMAGE_PHOTO = 'DS_TYPES_IMAGE_PHOTO',
    DS_TYPES_IMAGE_COAX = 'DS_TYPES_IMAGE_COAX',
    DS_TYPES_IMAGE_RED = 'DS_TYPES_IMAGE_RED',
    DS_TYPES_IMAGE_GREEN = 'DS_TYPES_IMAGE_GREEN',
    DS_TYPES_IMAGE_BLUE = 'DS_TYPES_IMAGE_BLUE',
    DS_TYPES_IMAGE_GS = 'DS_TYPES_IMAGE_GS',
    DS_TYPES_IMAGE_BW = 'DS_TYPES_IMAGE_BW',
    DS_TYPES_IMAGE_BMP = 'DS_TYPES_IMAGE_BMP',
    DS_TYPES_IMAGE_GIF = 'DS_TYPES_IMAGE_GIF',
    DS_TYPES_IMAGE_TIF = 'DS_TYPES_IMAGE_TIF',
    DS_TYPES_IMAGE_PNG = 'DS_TYPES_IMAGE_PNG',
    DS_TYPES_IMAGE_JPG = 'DS_TYPES_IMAGE_JPG',
    DS_TYPES_IMAGE_XBM = 'DS_TYPES_IMAGE_XBM',
    DS_TYPES_IMAGE_XPM = 'DS_TYPES_IMAGE_XPM',
    DS_TYPES_IMAGE_PPM = 'DS_TYPES_IMAGE_PPM',
    DS_TYPES_VIDEO_AVI = 'DS_TYPES_VIDEO_AVI',
    DS_TYPES_VIDEO_MP4 = 'DS_TYPES_VIDEO_MP4',
    DS_TYPES_VIDEO_MOV = 'DS_TYPES_VIDEO_MOV',
    DS_TYPES_VIDEO_MKV = 'DS_TYPES_VIDEO_MKV',
    DS_TYPES_VIDEO_WMV = 'DS_TYPES_VIDEO_WMV',
    DS_TYPES_CODELINE = 'DS_TYPES_CODELINE',
    DS_TYPES_BARCODE = 'DS_TYPES_BARCODE',
    DS_TYPES_MIWA = 'DS_TYPES_MIWA',
    DS_TYPES_SCAN_PDF417 = 'DS_TYPES_SCAN_PDF417',
    DS_TYPES_SCAN_AZTEC = 'DS_TYPES_SCAN_AZTEC',
    DS_TYPES_SCAN_DMATRIX = 'DS_TYPES_SCAN_DMATRIX',
    DS_TYPES_SCAN_QR = 'DS_TYPES_SCAN_QR',
    DS_TYPES_SCAN_CODE39 = 'DS_TYPES_SCAN_CODE39',
    DS_TYPES_SCAN_CODE128 = 'DS_TYPES_SCAN_CODE128',
    DS_TYPES_SCAN_CODE2OF5 = 'DS_TYPES_SCAN_CODE2OF5',
    DS_TYPES_ISO7816 = 'DS_TYPES_ISO7816',
    DS_TYPES_PRINT_2S_PAGE = 'DS_TYPES_PRINT_2S_PAGE',
    DS_TYPES_PRINT_2S_MULTI = 'DS_TYPES_PRINT_2S_MULTI',
    DS_TYPES_PRINT_PDF = 'DS_TYPES_PRINT_PDF',
    DS_TYPES_MIFARE = 'DS_TYPES_MIFARE',
    DS_TYPES_SUICA = 'DS_TYPES_SUICA',
    DS_TYPES_ISO15961 = 'DS_TYPES_ISO15961',
    DS_TYPES_RP1745 = 'DS_TYPES_RP1745',
    DS_TYPES_WEIGHT = 'DS_TYPES_WEIGHT',
    DS_TYPES_DIMENSION = 'DS_TYPES_DIMENSION',
    DS_TYPES_EPASSPORT_DG1 = 'DS_TYPES_EPASSPORT_DG1',
    DS_TYPES_EPASSPORT_DG2 = 'DS_TYPES_EPASSPORT_DG2',
    DS_TYPES_EPASSPORT_DG3 = 'DS_TYPES_EPASSPORT_DG3',
    DS_TYPES_EPASSPORT_DG4 = 'DS_TYPES_EPASSPORT_DG4',
    DS_TYPES_EPASSPORT_DG5 = 'DS_TYPES_EPASSPORT_DG5',
    DS_TYPES_EPASSPORT_DG6 = 'DS_TYPES_EPASSPORT_DG6',
    DS_TYPES_EPASSPORT_DG7 = 'DS_TYPES_EPASSPORT_DG7',
    DS_TYPES_EPASSPORT_DG8 = 'DS_TYPES_EPASSPORT_DG8',
    DS_TYPES_EPASSPORT_DG9 = 'DS_TYPES_EPASSPORT_DG9',
    DS_TYPES_EPASSPORT_DG10 = 'DS_TYPES_EPASSPORT_DG10',
    DS_TYPES_EPASSPORT_DG11 = 'DS_TYPES_EPASSPORT_DG11',
    DS_TYPES_EPASSPORT_DG12 = 'DS_TYPES_EPASSPORT_DG12',
    DS_TYPES_EPASSPORT_DG13 = 'DS_TYPES_EPASSPORT_DG13',
    DS_TYPES_EPASSPORT_DG14 = 'DS_TYPES_EPASSPORT_DG14',
    DS_TYPES_EPASSPORT_DG15 = 'DS_TYPES_EPASSPORT_DG15',
    DS_TYPES_EPASSPORT_DG16 = 'DS_TYPES_EPASSPORT_DG16',
    DS_TYPES_EPASSPORT_DG17 = 'DS_TYPES_EPASSPORT_DG17',
    DS_TYPES_EPASSPORT_DG18 = 'DS_TYPES_EPASSPORT_DG18',
    DS_TYPES_EPASSPORT_DG19 = 'DS_TYPES_EPASSPORT_DG19',
    DS_TYPES_EPASSPORT_DG20 = 'DS_TYPES_EPASSPORT_DG20',
    DS_TYPES_EPAYMENT = 'DS_TYPES_EPAYMENT',
    DS_TYPES_ILLUMINATION = 'DS_TYPES_ILLUMINATION',
    DS_TYPES_SSML = 'DS_TYPES_SSML',
    DS_TYPES_KEY = 'DS_TYPES_KEY',
    DS_TYPES_KEY_UP = 'DS_TYPES_KEY_UP',
    DS_TYPES_KEY_DOWN = 'DS_TYPES_KEY_DOWN',
    DS_TYPES_BIOMETRIC = 'DS_TYPES_BIOMETRIC',
    DS_TYPES_PRINT_SVG = 'DS_TYPES_PRINT_SVG',
    DS_TYPES_ITPS = 'DS_TYPES_ITPS'
}

/**
 * The characteristics for each component within the CUSS device.
 */
export type ComponentCharacteristics = {
    /**
     * The characteristics for the announcement component of the CUSS device.
     */
    audioOutput?: {
        /**
         * SSML version supported by the audio output component.
         */
        ssmlVersion: string;
        /**
         * The list of supported languages as RFC3066 2-letter codes or 2-2-letter codes.
         */
        supportedLanguages: Array<string>;
    };
    deviceHelpInstruction?: {
        instruction?: DeviceHelpInstructionType;
    };
    /**
     * A list of data types identifiers.
     */
    dsTypesList?: Array<CussDataTypes>;
    /**
     * A list of media type identifiers.
     */
    mediaTypesList: Array<MediaTypes>;
    /**
     * A list of device type identifiers.
     */
    deviceTypesList?: Array<DeviceTypes>;
    navigationType?: {
        type?: NavigationTypes;
    };
    /**
     * A list of supported display types and the physical screen diagonal.
     */
    displayType?: {
        screenDiagonal?: number;
        resolutions?: Array<ScreenResolution>;
    };
    /**
     * ITPS/AEA version supported by printers (BTP/BPP). - The minimum version must be [current version -1]. Example: 2018
     */
    itpsVersion?: string;
    /**
     * Scalable Vector Graphics (SVG) 1.1. - Please refer also to: https://www.w3.org/TR/SVG11/
     */
    svgVersion?: string;
    /**
     * If true, the baggage tag printer supports color printing (black and red).
     */
    supportsColor?: boolean;
    /**
     * Document bin characteristics for Feeder-, Dispenser-, Capture- components.
     */
    documentBin?: {
        /**
         * Describes the maximum number of documents a bin can hold.
         */
        binSize?: number;
        /**
         * Shows the high threshold of the bin if appropriate sensor is installed.
         */
        allmostFullLevel?: number;
        /**
         * Shows the low threshold of the bin if appropriate sensor is installed.
         */
        allmostEmptyLevel?: number;
    };
    /**
     * ConveyorSBD characteristics. - Older definitions have been removed after deprecation.
     */
    conveyorSBD?: {
        /**
         * The maximum weight of the baggage (in grams).
         */
        maxWeight?: number;
        /**
         * The maximum width of baggage (in millimeters).
         */
        maxWidth?: number;
        /**
         * The maximum height of baggage (in millimeters).
         */
        maxHeight?: number;
        /**
         * The maximum length of baggage (in millimeters).
         */
        maxLength?: number;
        /**
         * The maximum number of bags a conveyor can handle.
         */
        maxBags?: number;
        /**
         * If true, conveyor has a security barrier (for user safety).
         */
        barrierCapable?: boolean;
        /**
         * If true, conveyor system can detect intrusions at the front/user side (insertion).
         */
        userInterferenceCapable?: boolean;
        /**
         * If true, conveyor system can detect intrusions behind the front/user side (verification/parking).
         */
        safetyIntrusionCapable?: boolean;
        /**
         * If true, conveyor can only move in forward direction.
         */
        onewayForward?: boolean;
    };
    /**
     * A list of color options for illumination devices
     */
    illuminationColors?: Array<SupportedColors>;
    /**
     * A list of characteristics for the biometric subsystem.
     */
    subsystemBiometrics?: Array<BiometricsCharacteristics>;
    /**
     * A list of characteristics for the payments subsystem.
     */
    subsystemPayments?: Array<PaymentsCharacteristics>;
};

/**
 * Reference of the component on which the directive shall be executed.
 */
export type ComponentId = number;

/**
 * The list of hardware and software components that comprise a complete CUSS platform.
 */
export type ComponentList = Array<EnvironmentComponent>;

/**
 * Virtual component state codes <p>
 * *READY:* Component is ready to receive and execute any directives <br>
 * *BUSY:* Indicates any component activity (e.g. reading/writing) that has been invoked <br>
 * *UNVAILABLE:* Error condition that requires manual intervention
 *
 */
export enum ComponentState {
    READY = 'READY',
    BUSY = 'BUSY',
    UNAVAILABLE = 'UNAVAILABLE'
}

/**
 * Virtual component types with the following semantics... <p>
 * *CAPTURE:* Captures the document in a secured bin <br>
 * *DISPENSER:* Offer the document to the user or the user <br>
 * *FEEDER:* Offer the document from a feeder to another component (userless) <br>
 * *DATA_INPUT:* Inbound data transfer (e.g. digital input) <br>
 * *DATA_OUTPUT:* Outbound data transfer (e.g. illumination device) <br>
 * *USER_INPUT:* Inbound user data transfer (e.g. baggage scale )<br>
 * *USER_OUTPUT:* Outbound user data transfer (e.g. screen) <br>
 * *MEDIA_INPUT:* Components used for reading from media (e.g. bar-code reader) <br>
 * *MEDIA_OUTPUT:* Components used for writing to media (e.g. receipt printer) <br>
 * *STORAGE:* Reading/writing from/to storage (e.g. harddisk) <br>
 * *DISPLAY:* Handle a display (eg. the CUSS device screen) <br>
 * *NETWORK:* Handle network access <br>
 * *BAGGAGE_SCALE:* Represent a stand-alone baggage scale <br>
 * *INSERTION_BELT:* Insert/return position of a conveyor system <br>
 * *VERIFICATION_BELT:* Verification position of a conveyor system <br>
 * *PARKING_BELT:* Parking position of a conveyor system <br>
 * *ANNOUNCEMENT:* Audible output component allowing applications to use SSML <br>
 * *APPLICATION:* Used to query the state and/or characteristics of a CUSS application
 *
 */
export enum ComponentTypes {
    CAPTURE = 'CAPTURE',
    DISPENSER = 'DISPENSER',
    FEEDER = 'FEEDER',
    DATA_INPUT = 'DATA_INPUT',
    DATA_OUTPUT = 'DATA_OUTPUT',
    USER_INPUT = 'USER_INPUT',
    USER_OUTPUT = 'USER_OUTPUT',
    MEDIA_INPUT = 'MEDIA_INPUT',
    MEDIA_OUTPUT = 'MEDIA_OUTPUT',
    STORAGE = 'STORAGE',
    DISPLAY = 'DISPLAY',
    NETWORK = 'NETWORK',
    BAGGAGE_SCALE = 'BAGGAGE_SCALE',
    INSERTION_BELT = 'INSERTION_BELT',
    VERIFICATION_BELT = 'VERIFICATION_BELT',
    PARKING_BELT = 'PARKING_BELT',
    ANNOUNCEMENT = 'ANNOUNCEMENT',
    APPLICATION = 'APPLICATION'
}

export type DataRecord = {
    dataStatus?: DataStatus;
    /**
     * The type(s) of data in this data record.
     */
    dsTypes: Array<CussDataTypes>;
    /**
     * The data itself in encoded as specified by element "encoding", which also can be NULL, null, NIL, nil,....
     */
    data: string | null;
    /**
     * Information on how the data is encoded. - If not populated, TEXT is the default encoding.
     */
    encoding?: 'TEXT' | 'BASE64';
};

export type DataRecordList = Array<DataRecord>;

/**
 * Interface Data Status Codes with the following semantics... <p>
 * *DS_OK:* Data is OK <br>
 * *DS_CORRUPTED:* Data is corrupted <br>
 * *DS_INCOMPLETE:* Data is incomplete <br>
 * *DS_ZEROLENGTH:* Data is of length zero <br>
 * *DS_DOCUMENT_AUTHENTICATION_FAILED:* Authentication of document data failed <br>
 * *DS_INVALID:* Document read but a security feature is missing <br>
 * *DS_MISMATCH:* Document read but data inconsistent with security feature
 *
 */
export enum DataStatus {
    DS_OK = 'DS_OK',
    DS_CORRUPTED = 'DS_CORRUPTED',
    DS_INCOMPLETE = 'DS_INCOMPLETE',
    DS_ZEROLENGTH = 'DS_ZEROLENGTH',
    DS_DOCUMENT_AUTHENTICATION_FAILED = 'DS_DOCUMENT_AUTHENTICATION_FAILED',
    DS_INVALID = 'DS_INVALID',
    DS_MISMATCH = 'DS_MISMATCH'
}

/**
 * XML formatted device help text element to be inserted into applications audio output.
 */
export type DeviceHelpInstructionElements = {
    /**
     * Estimated announcement time in seconds
     */
    time?: number;
    /**
     * XML formatted device help text structure to be passed to applications for audio output. The texts for the audio output need to be in SSML 1.0/SSML 1.1 format.<p>
     * <b>Example:</b>
     * ```XML
     * <speak version="1.0" xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">
     * The magnetic card reader device is used to read the data from your credit card or frequent flyer card
     * </speak>
     * or...
     * <speak version="1.0" xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="ja-JP">
     * 磁気カードリーダ装置は、クレジットカードやマイレージカードからデータを読 み取るために使用される
     * </speak>
     * or ...
     *
     */
    ssmlElement?: string;
};

/**
 * XML formatted device help text structure to be inserted into applications audio output.
 */
export type DeviceHelpInstructionType = {
    /**
     * The general description of the user device in different languages
     */
    deviceDescription?: Array<DeviceHelpInstructionElements>;
    /**
     * Where user device is situated within the CUSS device in different languages
     */
    deviceLocation?: Array<DeviceHelpInstructionElements>;
    /**
     * A more detailed description of the user device in different languages
     */
    deviceProfile?: Array<DeviceHelpInstructionElements>;
    /**
     * A detailed description on how to use the device in different languages
     */
    deviceUsage?: Array<DeviceHelpInstructionElements>;
};

/**
 * Device Types describe how applications handle the device and how to advise users<p>
 * *NON_APPLICABLE_DEVICE_TYPE:* Device does not fit in any category <br>
 * *PRINT:* Device can print documents<br>
 * *READ:* Device can read documents<br>
 * *MOTORIZED:* Device can move in and out a document (e.g. cards)<br>
 * *DIP:* User has to dip in and remove a document (e.g. cards or passports)<br>
 * *SWIPE:* User has to swipe the document or card<br>
 * *CONTACTLESS:* Device can read a document from a (usually short) distance<br>
 * *HANDHELD:* Device can scan bar codes and and needs to be handled manually<br>
 * *INSERT:* Documents have to be inserted into the device<br>
 * *DISPENSE:* Device can dispense a document to the user or another component<br>
 * *CAPTURE:* Device can retract documents or cards<br>
 * *CONVEYOR:* Device can move baggage back and forth<br>
 * *SCALE:* Device can weigh items<br>
 * *CAMERA:* Device can take pictures<br>
 * *FLATBED:* Device can scan documents<br>
 * *CHIP_AND_PIN:* Device is a Chip & PIN device / payment device<br>
 * *EXTERNAL:* Device is not contained in the CUSS device<br>
 * *BIOMETRICS:* Device is a biometrics device / interface<br>
 * *ASSISTIVE:* Device can assist users with disabilities<br>
 * *ILLUMINATION:* Device represents a light<br>
 * *DISPLAY:* Device represents a display (e.g. a touch screen)
 *
 */
export enum DeviceTypes {
    NON_APPLICABLE_DEVICE_TYPE = 'NON_APPLICABLE_DEVICE_TYPE',
    PRINT = 'PRINT',
    READ = 'READ',
    MOTORIZED = 'MOTORIZED',
    DIP = 'DIP',
    SWIPE = 'SWIPE',
    CONTACTLESS = 'CONTACTLESS',
    HANDHELD = 'HANDHELD',
    INSERT = 'INSERT',
    DISPENSE = 'DISPENSE',
    CAPTURE = 'CAPTURE',
    CONVEYOR = 'CONVEYOR',
    SCALE = 'SCALE',
    CAMERA = 'CAMERA',
    FLATBED = 'FLATBED',
    CHIP_AND_PIN = 'CHIP_AND_PIN',
    EXTERNAL = 'EXTERNAL',
    BIOMETRICS = 'BIOMETRICS',
    ASSISTIVE = 'ASSISTIVE',
    ILLUMINATION = 'ILLUMINATION',
    DISPLAY = 'DISPLAY'
}

export type EnvironmentComponent = {
    /**
     * A textual description of the component. - Can be different on every platform. - Not to be used for component identfication.
     */
    componentDescription?: string;
    componentID?: ComponentId;
    componentType?: ComponentTypes;
    /**
     * The characteristics of this specific component, please refer to CUSS-DG document for a detailed list and descriptions.
     */
    componentCharacteristics?: Array<ComponentCharacteristics>;
    /**
     * A list of identifiers of components linked to this component.
     */
    linkedComponentIDs?: Array<ComponentId>;
    /**
     * Optional identifier that can be used to group components that represent the same HW device.
     */
    deviceReference?: string;
};

/**
 * Describes the environment/device on which the application will be operated.
 */
export type EnvironmentLevel = {
    /**
     * Session Timeout (in milliseconds) for active applications.
     */
    sessionTimeout: number;
    /**
     * Time (in milliseconds) left before an application is killed.
     */
    killTimeout: number;
    /**
     * Time for application initialization (in milliseconds).
     */
    initTimeout?: number;
    /**
     * The timeframe in which an application can expect an API acknowledgement from platform  (in milliseconds).
     */
    expectedAckTime?: number;
    /**
     * The platforms cache period for all directives (in milliseconds).
     */
    maxCacheTime?: number;
    /**
     * The exact model name of the CUSS device as defined in its configuration. - Allows applications e.g. to display device specific animations or information.
     */
    deviceModelName?: string;
    deviceID: UniqueId;
    deviceLocation: Location;
    /**
     * Supported versions of the CUSS specifications.
     */
    cussVersions: Array<string>;
    /**
     * Name of the installed operating system.
     */
    osName: string;
    /**
     * Version of the installed operating system.
     */
    osVersion: string;
};

/**
 * Severity categorization for the various events<p>
 * ALARM:* Requires immediate attention (i.e. manual intervention is required) <br>
 * WARNING:* Abnormal situation occurs, but manual intervention is not needed <br>
 * NORMAL:* Normal processing occurs
 *
 */
export enum EventCategories {
    ALARM = 'ALARM',
    WARNING = 'WARNING',
    NORMAL = 'NORMAL'
}

/**
 * Relations for all events <p>
 * *SOLICITED:* Event relates to an application request <br>
 * *UNSOLICITED:* Sent by the platform because of any internal change, not related to any request.
 *
 */
export enum EventModes {
    SOLICITED = 'SOLICITED',
    UNSOLICITED = 'UNSOLICITED'
}

/**
 * Categorization of publicity for the various events<p>
 * *PRIVATE:* Private events are sent as a solicited response only to those applications having requested an action on the platform <br>
 * *PUBLIC:* Public events indicate e.g. a state change of a component that is of interest for all applications <br>
 * *PLATFORM:* Sent internally between CUSS Application Manager, CLA, and the Component Interface
 *
 */
export enum EventTypes {
    PRIVATE = 'PRIVATE',
    PUBLIC = 'PUBLIC',
    PLATFORM = 'PLATFORM'
}

/**
 * The location definition for CUSS devices.
 */
export type Location = {
    /**
     * 3L code for the airport or city or any location.
     */
    airportCode?: string;
    /**
     * Terminal name, if applicable.
     */
    terminal?: string;
    /**
     * Area name, if applicable.
     */
    area?: string;
    /**
     * Free form address, if applicable.
     */
    address?: string;
};

/**
 * A Media Type describes what the component does and is able to handle/process<p>
 * *NON_APPLICABLE_MEDIATYPE:* Media type doesn't fit in any category <br>
 * # MSR remove: *MAGCARD:* Cards with Mag-Stripes<br>
 * *JISCARD:* JIS II Magnetic Stripe Encoding (Japanese Industrial Standard)<br>
 * *CARD:* Any card not falling under more specific descriptions<br>
 * *CHIP:* Cards equipped with chips (e.g. Chip & PIN)<br>
 * *BARCODE:* Any type of 1- or 2D bar-code<br>
 * *TICKET:* Ticket document<br>
 * *RECEIPT:* Receipt document<br>
 * *BOARDINGPASS:* Standard Boarding Pass<br>
 * *BAGGAGETAG:* Standard Baggage Tag<br>
 * *HEAVYTAG:* Standard Heavy Tag<br>
 * *RFID_BAGGAGETAG:* Baggage Tag with an RFID chip<br>
 * *BAGGAGE:* Passenger Baggage<br>
 * *PASSPORT:* Machine readable Passport Document<br>
 * *IDCARD:* Machine readable National ID-Card<br>
 * *VISA:*  Machine readable Visa Document<br>
 * *DRIVERLICENSE:*  Machine readable Driver License<br>
 * *RFID:* Documents with RFID chips<br>
 * *NFC:* Documents with NFC chip<br>
 * *OCR:* OCR data<br>
 * *IMAGE:* Image data<br>
 * *VIDEO:* Video data<br>
 * *PRINTED:* Any printed document not falling under more specific descriptions<br>
 * *AUDIO:* Any audible data<br>
 * *VISUAL:* Any visual data<br>
 * *TOUCH:* Touch Screen input<br>
 * *DATASTRUCTURE:* XML or JSON formatted structured data
 *
 */
export enum MediaTypes {
    CARD = 'CARD',
    CHIP = 'CHIP',
    BARCODE = 'BARCODE',
    TICKET = 'TICKET',
    RECEIPT = 'RECEIPT',
    BOARDINGPASS = 'BOARDINGPASS',
    BAGGAGETAG = 'BAGGAGETAG',
    HEAVYTAG = 'HEAVYTAG',
    RFID_BAGGAGETAG = 'RFID_BAGGAGETAG',
    BAGGAGE = 'BAGGAGE',
    PASSPORT = 'PASSPORT',
    IDCARD = 'IDCARD',
    VISA = 'VISA',
    DRIVERLICENSE = 'DRIVERLICENSE',
    RFID = 'RFID',
    NFC = 'NFC',
    OCR = 'OCR',
    IMAGE = 'IMAGE',
    PRINTED = 'PRINTED',
    AUDIO = 'AUDIO',
    VISUAL = 'VISUAL',
    TOUCH = 'TOUCH',
    DATASTRUCTURE = 'DATASTRUCTURE'
}

/**
 * Messagecodes related to system, applications and platform directives/devices.<p>
 * *OK:* Device is ready or interface call did not generate an error. - *public (private for solicited events)*<br>
 * *CANCELLED:* Interface call was cancelled. - *private*<br>
 * *WRONG_SYSTEM_STATE:* The system or component is in the wrong state to process the call. - *private + platform*<br>
 * *WRONG_APPLICATION_STATE:* The application is in the wrong state to process the call. - *private + platform*<br>
 * *OUT_OF_SEQUENCE:* Function has been called out of sequence. (e.g. calling send() before enable()) - *private*<br>
 * *TIMEOUT:* Function call timed out. - *private (directive related)*<br>
 * *FORMAT_ERROR:* Error detected in format of data used with send() or setup(). - *private + platform (platform only for output classes)*<br>
 * *LENGTH_ERROR:* Data stream provided for send()/setup() is incomplete. - *private + platform (platform only for output classes)*<br>
 * *THRESHOLD_ERROR:* Too many errors have occurred. - *public*<br>
 * *THRESHOLD_USAGE:* Inserting/removing documents performed too many times. - *public*<br>
 * *DATA_MISSING:* No data provided while using send()/setup functions. - *private + platform (platform only for output classes)*<br>
 * *DATA_PRESENT:* Data was read from an inserted/scanned document. - *private*<br>
 * *SOFTWARE_ERROR:* Software error detected during execution . - *private + platform*<br>
 * *CRITICAL_SOFTWARE_ERROR:* Software error detected during execution that makes the component permanently UNAVAILABLE. - *public*<br>
 * *HARDWARE_ERROR:* An error caused by hardware malfunction makes the component UNAVAILABLE. - *public*<br>
 * *NOT_REACHABLE:* Device or application is not connected (unknown status). - *public*<br>
 * *NOT_RESPONDING:* Device or application is connected but not responding or not ready. - *public*<br>
 * *SESSION_TIMEOUT:* Application exceeded the max. time for executing a user transaction. - *private + platform (application related)*<br>
 * *KILL_TIMEOUT:* Application exceeded the max. time for responding to the session timeout. - *private + platform (application related)*<br>
 * *TRANSFER_REQUEST:* Indicates that the state change is related to an application transfer. - *private + platform*<br>
 *
 * # AGe: Check with the group
 * *SYSTEM_FIREALARM:* The system received an urgent firealarm to which the platfrom has to react to (darken screens, suspend applications, ...)
 *
 * *SYSTEM_REQUEST:* Any request by the platform to the application for system management purposes. - *public*<br>
 * *SYSTEM_SHUTDOWN:* Notification message to applications indicating the CUSS platform is shutting down. - *public*<br>
 * *DEVICE_REQUEST:* Indication for a change in the device state and requests for multi step interaction. - *private + platform*
 *
 * *MEDIA_JAMMED:* A document got jammed inside the device. - *public*<br>
 * *MEDIA_MISPLACED:* A document was inserted incorrectly. E.g. a card was inserted up-side down. - *private + platform (platform only for userless classes)*<br>
 * *MEDIA_PRESENT:* A document was inserted into the device. Event is reported even when the document does not reside in the device anymore. E.g. for DIP and Swipe readers. - *private*<br>
 * *MEDIA_ABSENT:* A document was removed from the device. The event is reported even if document was not kept in the  device (Swipe or DIP reader). - *private*<br>
 * *MEDIA_EMPTY:* A feeder or dispenser reached the empty level threshold. - *public*<br>
 * *MEDIA_DAMAGED:* A document is physically damaged. - *public*<br>
 * *MEDIA_INCOMPLETELY_INSERTED:* A document was not fully inserted into the device. - *private*<p>
 * *MEDIA_HIGH:* A feeder or dispenser reached the high level threshold. - *public*<br>
 * *MEDIA_FULL:* A feeder or dispenser reached the full level threshold. - *public*<br>
 * *MEDIA_LOW:* A feeder or dispenser reached the low level threshold. - *public*<br>
 *
 * *BAGGAGE_FULL:* Maximum number of bags reached in this conveyor position. - *public*<br>
 * *BAGGAGE_UNDETECTED:* Baggage unexpectedly absent. - *private + platform*<br>
 * *BAGGAGE_PRESENT:* Baggage present on position. - *private*<br>
 * *BAGGAGE_ABSENT:* No baggage present on position. - *private*<br>
 * *BAGGAGE_OVERSIZED:* Bag is too long/high/flat/short/heavy. - *private + platform*<br>
 * *BAGGAGE_TOO_MANY_BAGS:* Baggage present, detected more than one baggage. - *private + platform*<br>
 * *BAGGAGE_UNEXPECTED_BAG:* Unexpected baggage present. - *private + platform*<br>
 * *BAGGAGE_TOO_HIGH:* Bag is too high. - *private + platform*<br>
 * *BAGGAGE_TOO_LONG:* Bag is too long. - *private + platform*<br>
 * *BAGGAGE_TOO_FLAT:* Bag is too flat. - *private + platform*<br>
 * *BAGGAGE_TOO_SHORT:* Bag is too short. - *private + platform*<br>
 * *BAGGAGE_TOO_WIDE:* Bag is to wide. - *private + platform*<br>
 * *BAGGAGE_TOO_SMALL:* Bag is too small.- *private + platform*<br>
 * *BAGGAGE_INVALID_DATA:* Baggage tag data is not compliant to IATA standards and/or invalid data from the sub systems. - *private + platform*<br>
 * *BAGGAGE_WEIGHT_OUT_OF_RANGE:* Weight exceeds weight range of conveyor system or SBD. - *private + platform*<br>
 * *BAGGAGE_JAMMED:* Bag is jammed on conveyor. - *private + platform*<br>
 * *BAGGAGE_WRONG_INSERTED:* Bag inserted in the wrong place, e.g. too far in front/behind. - *private + platform*<br>
 * *BAGGAGE_EMERGENCY_STOP:* Person pressed the Emergency-Stop button. - *public*<br>
 * *BAGGAGE_RESTLESS:* Bag is permanently moving, maybe it is- or contains a living creature. - *private + platform*<br>
 * *BAGGAGE_TRANSPORT_BUSY:* *private + platform*<br>
 * *BAGGAGE_MISTRACKED:* The movement of a bag did not take place as expected when activating conveyors. - *private + platform*<br>
 * *BAGGAGE_FORWARD_FAILED:* System could not move the bag to the next position on the conveyor. - *private + platform*<br>
 * *BAGGAGE_BACKWARD_FAILED:* System could not move the bag to the previous position on the conveyor. - *private + platform*<br>
 * *BAGGAGE_UNEXPECTED_CHANGE:* The baggage has unexpectedly changed in size, volume or shape versus the original metrics. - *private + platform*<br>
 * *BAGGAGE_ACCEPTED:* The bag was accepted for check-in. - *private + platform*<br>
 * *BAGGAGE_DELIVERED:* The bag on the parking position has been fed into the BHS. - *private + platform*<br>
 * *BAGGAGE_INTERFERENCE_USER:* A user interference (non-critical) was detected at some point on the conveyor. Operations may proceed. - *private + platform*<br>
 * *BAGGAGE_INTRUSION_SAFETY:* A critical security/safety intrusion was detected at some point on the conveyor. Operations are likely halted and in error condition until a supervisor resets. - *private + platform*<br>
 * *BAGGAGE_NOT_CONVEYABLE: The current bag is in some way not acceptable for the BHS (used when none of the following descriptions apply). - *private + platform*<br>
 * *BAGGAGE_IRREGULAR_BAG:* The current bag shall be handled as bulky baggage like skies, strollers, prams, wheelchairs. - *private + platform*<br>
 * *BAGGAGE_BAG_WITH_STRAPS:* The current bag has straps and therefore is not acceptable for the BHS.*private + platform*<br>
 * *BAGGAGE_UPRIGHT_BAG:* The current bag stands upright and shall be tilted before processing. - *private + platform*<br>
 * *BAGGAGE_HANDLE_EXTENDED:* A handle extends from the bag and shall to be stowed. - *private + platform*<br>
 * *BAGGAGE_MULTIPLE_BAGS:* The system has detected more than one bag on the conveyor. - *private + platform*<br>
 * *BAGGAGE_SLOPED_BAG:* The current bag is leaning/levering on side walls probably reducing weight. The bag shall be repositioned. - *private + platform*<br>
 * *BAGGAGE_VOLUME_NOT_DETERMINABLE:* The volume of the current bag can not be determined. - *private + platform*<br>
 * *BAGGAGE_TUB_REQUIRED:* The current bag shall be placed in a TUB. - *private + platform*<br>
 * *BAGGAGE_OVERFLOW_TUB:* The current bag overflows the sides of the tub and shall be repositioned. - *private + platform*<br>
 * *BAGGAGE_XRAY_SUSPICIOUS:* An X-ray system connected to the SBD reported an x-rayed bag being suspicious. - *private + platform*<br>
 * *BAGGAGE_MAINTENANCE_MODE:* System was switched offline for maintenance purpose. - *public*<br>
 * *BAGGAGE_FORCEBAG_MODE:* System was switched offline for forced bag injection. - *public*<br>
 * *BAGGAGE_MANUAL_MODE:* System is online but was switched to manual mode. - *public*<br>
 * *BAGGAGE_OFFBHS_MODE:* System has been switched off from BHS side. - *public*<br>
 * *BAGGAGE_SUSPENDED_MODE:* System has been suspended by service personnel. - *public*<br>
 * *BAGGAGE_OPERATIONAL_STOP:* Staff temporarily suspended baggage handling. - *private + platform*<p>
 *
 */
export enum MessageCodes {
    OK = 'OK',
    CANCELLED = 'CANCELLED',
    WRONG_SYSTEM_STATE = 'WRONG_SYSTEM_STATE',
    WRONG_APPLICATION_STATE = 'WRONG_APPLICATION_STATE',
    OUT_OF_SEQUENCE = 'OUT_OF_SEQUENCE',
    TIMEOUT = 'TIMEOUT',
    FORMAT_ERROR = 'FORMAT_ERROR',
    LENGTH_ERROR = 'LENGTH_ERROR',
    THRESHOLD_ERROR = 'THRESHOLD_ERROR',
    THRESHOLD_USAGE = 'THRESHOLD_USAGE',
    DATA_MISSING = 'DATA_MISSING',
    DATA_PRESENT = 'DATA_PRESENT',
    SOFTWARE_ERROR = 'SOFTWARE_ERROR',
    CRITICAL_SOFTWARE_ERROR = 'CRITICAL_SOFTWARE_ERROR',
    HARDWARE_ERROR = 'HARDWARE_ERROR',
    NOT_REACHABLE = 'NOT_REACHABLE',
    NOT_RESPONDING = 'NOT_RESPONDING',
    SESSION_TIMEOUT = 'SESSION_TIMEOUT',
    KILL_TIMEOUT = 'KILL_TIMEOUT',
    TRANSFER_REQUEST = 'TRANSFER_REQUEST',
    SYSTEM_REQUEST = 'SYSTEM_REQUEST',
    SYSTEM_SHUTDOWN = 'SYSTEM_SHUTDOWN',
    DEVICE_REQUEST = 'DEVICE_REQUEST',
    MEDIA_JAMMED = 'MEDIA_JAMMED',
    MEDIA_MISPLACED = 'MEDIA_MISPLACED',
    MEDIA_PRESENT = 'MEDIA_PRESENT',
    MEDIA_ABSENT = 'MEDIA_ABSENT',
    MEDIA_EMPTY = 'MEDIA_EMPTY',
    MEDIA_DAMAGED = 'MEDIA_DAMAGED',
    MEDIA_INCOMPLETELY_INSERTED = 'MEDIA_INCOMPLETELY_INSERTED',
    MEDIA_HIGH = 'MEDIA_HIGH',
    MEDIA_FULL = 'MEDIA_FULL',
    MEDIA_LOW = 'MEDIA_LOW',
    BAGGAGE_FULL = 'BAGGAGE_FULL',
    BAGGAGE_UNDETECTED = 'BAGGAGE_UNDETECTED',
    BAGGAGE_PRESENT = 'BAGGAGE_PRESENT',
    BAGGAGE_ABSENT = 'BAGGAGE_ABSENT',
    BAGGAGE_OVERSIZED = 'BAGGAGE_OVERSIZED',
    BAGGAGE_TOO_MANY_BAGS = 'BAGGAGE_TOO_MANY_BAGS',
    BAGGAGE_UNEXPECTED_BAG = 'BAGGAGE_UNEXPECTED_BAG',
    BAGGAGE_TOO_HIGH = 'BAGGAGE_TOO_HIGH',
    BAGGAGE_TOO_LONG = 'BAGGAGE_TOO_LONG',
    BAGGAGE_TOO_FLAT = 'BAGGAGE_TOO_FLAT',
    BAGGAGE_TOO_SHORT = 'BAGGAGE_TOO_SHORT',
    BAGGAGE_TOO_WIDE = 'BAGGAGE_TOO_WIDE',
    BAGGAGE_TOO_SMALL = 'BAGGAGE_TOO_SMALL',
    BAGGAGE_INVALID_DATA = 'BAGGAGE_INVALID_DATA',
    BAGGAGE_WEIGHT_OUT_OF_RANGE = 'BAGGAGE_WEIGHT_OUT_OF_RANGE',
    BAGGAGE_JAMMED = 'BAGGAGE_JAMMED',
    BAGGAGE_WRONG_INSERTED = 'BAGGAGE_WRONG_INSERTED',
    BAGGAGE_EMERGENCY_STOP = 'BAGGAGE_EMERGENCY_STOP',
    BAGGAGE_RESTLESS = 'BAGGAGE_RESTLESS',
    BAGGAGE_TRANSPORT_BUSY = 'BAGGAGE_TRANSPORT_BUSY',
    BAGGAGE_MISTRACKED = 'BAGGAGE_MISTRACKED',
    BAGGAGE_FORWARD_FAILED = 'BAGGAGE_FORWARD_FAILED',
    BAGGAGE_BACKWARD_FAILED = 'BAGGAGE_BACKWARD_FAILED',
    BAGGAGE_UNEXPECTED_CHANGE = 'BAGGAGE_UNEXPECTED_CHANGE',
    BAGGAGE_ACCEPTED = 'BAGGAGE_ACCEPTED',
    BAGGAGE_DELIVERED = 'BAGGAGE_DELIVERED',
    BAGGAGE_INTERFERENCE_USER = 'BAGGAGE_INTERFERENCE_USER',
    BAGGAGE_INTRUSION_SAFETY = 'BAGGAGE_INTRUSION_SAFETY',
    BAGGAGE_NOT_CONVEYABLE = 'BAGGAGE_NOT_CONVEYABLE',
    BAGGAGE_IRREGULAR_BAG = 'BAGGAGE_IRREGULAR_BAG',
    BAGGAGE_BAG_WITH_STRAPS = 'BAGGAGE_BAG_WITH_STRAPS',
    BAGGAGE_UPRIGHT_BAG = 'BAGGAGE_UPRIGHT_BAG',
    BAGGAGE_HANDLE_EXTENDED = 'BAGGAGE_HANDLE_EXTENDED',
    BAGGAGE_MULTIPLE_BAGS = 'BAGGAGE_MULTIPLE_BAGS',
    BAGGAGE_SLOPED_BAG = 'BAGGAGE_SLOPED_BAG',
    BAGGAGE_VOLUME_NOT_DETERMINABLE = 'BAGGAGE_VOLUME_NOT_DETERMINABLE',
    BAGGAGE_TUB_REQUIRED = 'BAGGAGE_TUB_REQUIRED',
    BAGGAGE_OVERFLOW_TUB = 'BAGGAGE_OVERFLOW_TUB',
    BAGGAGE_XRAY_SUSPICIOUS = 'BAGGAGE_XRAY_SUSPICIOUS',
    BAGGAGE_MAINTENANCE_MODE = 'BAGGAGE_MAINTENANCE_MODE',
    BAGGAGE_FORCEBAG_MODE = 'BAGGAGE_FORCEBAG_MODE',
    BAGGAGE_MANUAL_MODE = 'BAGGAGE_MANUAL_MODE',
    BAGGAGE_OFFBHS_MODE = 'BAGGAGE_OFFBHS_MODE',
    BAGGAGE_SUSPENDED_MODE = 'BAGGAGE_SUSPENDED_MODE',
    BAGGAGE_OPERATIONAL_STOP = 'BAGGAGE_OPERATIONAL_STOP'
}

/**
 * Describes the type of the navigation pad...<p>
 * *NON_APPLICABLE_NAVIGATION_TYPE:* Navigation type doesn't fit in any category <br>
 * *NAVPAD_5_KEY:*  The usual STORM navigation pad with 5 keys <br>
 * *NAVPAD_8_KEY:*  The usual STORM navigation pad with 8 keys <br>
 * *AUDIONAV_6_KEY:* The diamond shaped STORM audio navigation pad with 6 keys <br>
 * *AUDIONAV_6_KEY_BAR:* The STORM audio navigation pad with 6 keys in horizontal order'
 *
 */
export enum NavigationTypes {
    NON_APPLICABLE_NAVIGATION_TYPE = 'NON_APPLICABLE_NAVIGATION_TYPE',
    NAVPAD_5_KEY = 'NAVPAD_5_KEY',
    NAVPAD_8_KEY = 'NAVPAD_8_KEY',
    AUDIONAV_6_KEY = 'AUDIONAV_6_KEY',
    AUDIONAV_6_KEY_BAR = 'AUDIONAV_6_KEY_BAR'
}

/**
 * Correlation ID definition for tracking purposes. - This GUID is platform generated and stored in the platform logs. The ID helps to reconcile log entries on different systems. - If there's currently no passenger session active the ID shall be 'NONE' or 'none' for unsolicited events.
 *
 */
export type PassengerSessionId = string;

/**
 * The characteristics of the payments sub system
 */
export enum PaymentsCharacteristics {
    DEBIT = 'DEBIT',
    CREDIT = 'CREDIT',
    NFC = 'NFC',
    AMEX = 'AMEX',
    CART_BLANCHE = 'CART_BLANCHE',
    DISCOVER = 'DISCOVER',
    JCB = 'JCB',
    MAESTRO = 'MAESTRO',
    MASTERCARD = 'MASTERCARD',
    SWITCH = 'SWITCH',
    VISA = 'VISA'
}

/**
 * PlatformData is used to transfer results from (regular) directive calls back to the application.
 */
export type PlatformData = {
    /**
     * The META data of this message
     */
    meta: {
        deviceID: UniqueId;
        requestID: UniqueId;
        /**
         * Time stamp in UTC format.
         */
        timeStamp: string;
        passengerSessionID: PassengerSessionId;
        applicationID: ApplicationId;
        componentID?: ComponentId;
        componentState?: ComponentState;
        currentApplicationState: ApplicationState;
        messageCode: MessageCodes;
        eventClassification?: {
            eventMode?: EventModes;
            eventType?: EventTypes;
            eventCategory?: EventCategories;
        };
        platformDirective?: PlatformDirectives;
    };
    /**
     * The payload of this message. -
     * Only the required payload(s) needed for the directive will be used by the platform.
     * Any others will be discarded.
     *
     */
    payload?: {
        applicationActivation?: ApplicationActivation;
        environmentLevel?: EnvironmentLevel;
        componentList?: ComponentList;
        dataRecords?: DataRecordList;
        bagdropData?: BaggageData;
        paymentData?: CommonUsePaymentMessage;
        biometricData?: CommonUseBiometricMessage;
    };
};

/**
 * Platform directives name definitions and descriptions. <p>*Please note:* In contrast to earlier CUSS versions applications are now responsible for tracking and handling the time and timeouts for any directive that may require longer execution. Applications shall use the cancel directive to terminate a too long pending call.<p>
 * *platform_environment:* This is the **second directive** to be issued by the application to get basic information on the specific CUSS Platform implementation.<br>
 * *platform_components:* This directive returns a list of all the implemented components, their characteristics and their object identifiers. This allows the application to check whether all the components that it requires are implemented or not.<br>
 * *platform_applications_staterequest:* This directive is used by the application to request a state change from CUSS Application Manager, which will change the application state if request is approved.<br>
 * *platform_applications_transferrequest:* This directive is used by the application to request an application transfer from the CUSS Application Manager.<br>
 * *platform_applications_acknowledge_accessible:* An application confirms with this directive that it has switched to accessible mode after being activated by the CUSS application manager for the accessible mode.<br>
 * *peripherals_announcement_play:* Requests that an SSML formatted text to be spoken immediately. - Directive requires component identifier and the XML formatted text to be spoken.<br>
 * *peripherals_announcement_pause:* Temporarily suspends any play back currently in progress. -  Directive requires component identifier.<br>
 * *peripherals_announcement_resume:* Resumes any paused play back currently in progress. -  Directive requires component identifier.<br>
 * *peripherals_announcement_stop:* Stops any play back currently in progress. - Directive requires component identifier.<br>
 * *peripherals_cancel:* Cancels all currently executed and queued directives on this component at the time of issuing this directive. - Directive requires component identifier.<br>
 * *peripherals_query:* Returns the current state/status of the virtual component. - Directive requires component identifier.<br>
 * *peripherals_send:* Sends data from the application to the component. - Directive requires component identifier.<br>
 * *peripherals_setup:* Set up the profile/context of the virtual component and prepare it for application usage. - Directive requires component identifier.<br>
 * *peripherals_userpresent_enable:* Make the virtual component available for the user (e.g. enable a reader device for a document insertion). - Directive requires component identifier.<br>
 * *peripherals_userpresent_disable:* Make the virtual component unavailable for the user (e.g. disable a reader device from a document insertion). - Directive requires component identifier.<br>
 * *peripherals_userpresent_offer:* Offers a document or a processed item from the virtual component to the user or to another component. - Directive requires component identifier.<br>
 * *peripherals_conveyors_forward:* Moves a bag to the next position on the conveyor or to the airport’s collector belt. - Directive requires component identifier.<br>
 * *peripherals_conveyors_backward:* Moves a bag back to the previous position on the conveyor or back to the user. - Directive requires component identifier.<br>
 * *peripherals_conveyors_process:* Examine and/or process the bag currently on a belt component to get baggage data like weight, dimensions, LPNs, RFID, and similar. - Directive requires component identifier.<br>
 *
 */
export enum PlatformDirectives {
    PLATFORM_ENVIRONMENT = 'platform_environment',
    PLATFORM_COMPONENTS = 'platform_components',
    PLATFORM_APPLICATIONS_STATEREQUEST = 'platform_applications_staterequest',
    PLATFORM_APPLICATIONS_TRANSFERREQUEST = 'platform_applications_transferrequest',
    PLATFORM_APPLICATIONS_ACKNOWLEDGE_ACCESSIBLE = 'platform_applications_acknowledge_accessible',
    PERIPHERALS_ANNOUNCEMENT_PLAY = 'peripherals_announcement_play',
    PERIPHERALS_ANNOUNCEMENT_PAUSE = 'peripherals_announcement_pause',
    PERIPHERALS_ANNOUNCEMENT_RESUME = 'peripherals_announcement_resume',
    PERIPHERALS_ANNOUNCEMENT_STOP = 'peripherals_announcement_stop',
    PERIPHERALS_CANCEL = 'peripherals_cancel',
    PERIPHERALS_QUERY = 'peripherals_query',
    PERIPHERALS_SEND = 'peripherals_send',
    PERIPHERALS_SETUP = 'peripherals_setup',
    PERIPHERALS_USERPRESENT_ENABLE = 'peripherals_userpresent_enable',
    PERIPHERALS_USERPRESENT_DISABLE = 'peripherals_userpresent_disable',
    PERIPHERALS_USERPRESENT_OFFER = 'peripherals_userpresent_offer',
    PERIPHERALS_CONVEYORS_FORWARD = 'peripherals_conveyors_forward',
    PERIPHERALS_CONVEYORS_BACKWARD = 'peripherals_conveyors_backward',
    PERIPHERALS_CONVEYORS_PROCESS = 'peripherals_conveyors_process'
}

/**
 * A single x-y screen resolution measured in pixels.
 */
export type ScreenResolution = {
    vertical?: number;
    horizontal?: number;
};

/**
 * Color capability definitions for illumination devices...<p>
 * *CLR_RGB:* Illumination device supports colors in nearly the RGB spectrum <br>
 * *CLR_ON:* Illumination device supports color for switched on mode <br>
 * *CLR_OFF:* Illumination device supports color for switched off mode <br>
 * *CLR_RED...CLR_WHITE:* Illumination device supports the specified color
 *
 */
export enum SupportedColors {
    CLR_RGB = 'CLR_RGB',
    CLR_ON = 'CLR_ON',
    CLR_OFF = 'CLR_OFF',
    CLR_RED = 'CLR_RED',
    CLR_GREEN = 'CLR_GREEN',
    CLR_BLUE = 'CLR_BLUE',
    CLR_DARKRED = 'CLR_DARKRED',
    CLR_DARKGREEN = 'CLR_DARKGREEN',
    CLR_DARKBLUE = 'CLR_DARKBLUE',
    CLR_YELLOW = 'CLR_YELLOW',
    CLR_MAGENTA = 'CLR_MAGENTA',
    CLR_CYAN = 'CLR_CYAN',
    CLR_AMBER = 'CLR_AMBER',
    CLR_PURPLE = 'CLR_PURPLE',
    CLR_SPRINGGREEN = 'CLR_SPRINGGREEN',
    CLR_WHITE = 'CLR_WHITE'
}

/**
 * The unique identifier (GUID) for devices and requests and any other purpose that requires a unique identifier.
 */
export type UniqueId = string;

/**
 * Provide object weight measurements for standalone scales and SBD devices.
 */
export type WeightType = {
    alibi?: AlibiType;
    weight: number;
    stable: boolean;
    /**
     * Indicates the weight unit.
     */
    unit: 'IMPERIAL_POUNDS' | 'METRIC_GRAMM' | 'METRIC_KILOGRAMM';
};

/**
 * Main Baggage data structure for exchanging baggage data (dimensions, baggage- and RFID tags) between CUSS platform and applications.
 */
export type BaggageData = {
    /**
     * Values identified for an object on the measurement device.
     */
    baggageMeasurements?: {
        weight?: ExtendedWeightType;
        dimensions?: DimensionType;
    };
    /**
     * List of optical barcode measurement values.
     */
    barcodeTagList?: {
        lpnBarcodeTag?: Array<BarcodeTagDataType>;
        otherBarcodeTag?: Array<string>;
    };
    /**
     * List of radio frequency measurement values (for components supporting DS_TYPES_ISO15961).
     */
    rfidTagList?: {
        rfidTag: Array<RfidTagDataType>;
    };
    /**
     * Indicates whether or not a heavy tag was detected with the currently processed bag.
     */
    heavyTagDetected?: boolean;
    /**
     * IATA RP1745 Baggage Source Message (BSM) values containing at least the  following elements: .V, .F and .N. (for components supporting DS_TYPES_RP1745)
     */
    bsmMessage?: string;
};

/**
 * IATA License Plate Number (10 digits).
 */
export type BarcodeTagDataType = {
    lpnNumber: string;
};

/**
 * Provide object dimension measurements.
 */
export type DimensionType = {
    alibi?: AlibiType;
    /**
     * Height of the object, in centimeters (cm).
     */
    height?: number;
    /**
     * Length of the object, in centimeters (cm).
     */
    length?: number;
    /**
     * Width of the object, in centimeters (cm).
     */
    width?: number;
    /**
     * Indicates if the measurement is stable.
     */
    stable: boolean;
};

/**
 * Data acquired for a single object on the bag measurement device.
 */
export type ExtendedWeightType = {
    grossWeight: WeightType;
    netWeight: WeightType;
    tareWeight: WeightType;
    /**
     * Indicates whether a tub was detected or not.
     */
    tubDetected: boolean;
};

/**
 * RFID tag data structure (as per IATA Recommended Practice 1740c).
 */
export type RfidElement = {
    /**
     * RFID Object Identifier (e.g. [1 0 15961 12] 1..127).
     */
    objectKey: string;
    /**
     * RFID tag data in binary format.
     */
    binaryData?: string;
    /**
     * RFID tag data as a normal string.
     */
    stringData?: string;
};

/**
 * RFID tag data element list.
 */
export type RfidTagDataType = {
    /**
     * RFID Transponder Identifier.
     */
    id: string;
    rfidElements?: Array<RfidElement>;
};

export type SubscribeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/platform/subscribe';
};

export type DummyPlatformData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/dummy/platform';
};

export type DummyPlatformResponses = {
    /**
     * A dummy response definition just to reference the schema. - Please see comments above.
     */
    200: PlatformData;
};

export type DummyPlatformResponse = DummyPlatformResponses[keyof DummyPlatformResponses];

export type DummyApplicationData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/dummy/application';
};

export type DummyApplicationResponses = {
    /**
     * A dummy response definition just to reference the schema. - Please see comments above.
     */
    200: ApplicationData;
    /**
     * A dummy response definition just to reference the schema. - Please see comments above.
     */
    201: ApiAcknowledgement;
};

export type DummyApplicationResponse = DummyApplicationResponses[keyof DummyApplicationResponses];

export type ClientOptions = {
    baseUrl: string;
};